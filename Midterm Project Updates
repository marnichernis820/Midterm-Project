# this is the function to check if it's safe to place a number in a given cell
def is_safe(board, row, col, num):
    # Check if the number is already in the row
    for x in range(9):
        if board[row][x] == num:
            return False
    
    # Check if the number is already in the column
    for x in range(9):
        if board[x][col] == num:
            return False
    
    # Check if the number is in the 3x3 sub-grid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if board[i + start_row][j + start_col] == num:
                return False
    
    return True

# Function to solve the Sudoku board using backtracking
def solve_sudoku(board):
    # Find an empty location in the board (represented by 0)
    empty_location = find_empty_location(board)
    if not empty_location:
        return True  # Puzzle solved
    
    row, col = empty_location
    
    # Try numbers from 1 to 9 in the empty cell
    for num in range(1, 10):
        if is_safe(board, row, col, num):
            board[row][col] = num  # Place the number
            
            # Recursively attempt to solve the board with the new number
            if solve_sudoku(board):
                return True
            
            # If placing num doesn't lead to a solution, undo the choice
            board[row][col] = 0
    
    return False  # Trigger backtracking

# Function to find an empty cell (denoted by 0)
def find_empty_location(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)
    return None

# Function to print the Sudoku board
def print_board(board):
    for row in board:
        print(" ".join(str(num) for num in row))

# Example Sudoku puzzle (0 represents empty cells)
board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# Solve the Sudoku puzzle and print the result
if solve_sudoku(board):
    print("Sudoku puzzle solved:")
    print_board(board)
else:
    print("No solution exists.")
